
// Project: PROJECT NAME
// File Purpose: Flexbox stylesheet (SCSS).
// Created by Norex
// Date: CURRENT DATE
// Prepared by Justin Bellefontaine @ Norex

// All textual content contained herein is copyright and property of 
// Norex.ca. Unauthorized use or duplication will not be tolerated.

// TABLE OF CONTENTS

// S:01 Mixins
// S:02 Flexbox Styles
// S:03 Responsive flexbox styles (media queries)


@import "settings";


// ==|== S:01 Mixins ===============================================


// Apply to the parent container element with flexible elements inside
// Children inside this parent will automatically be treated as flexible elements

@mixin flexbox {
	display: -webkit-box; 	// OLD - iOS 6-, Safari 3.1-6
	display: -moz-box; 		// OLD - Firefox 19- (buggy but mostly works)
	display: -ms-flexbox; 	// TWEENER - IE 10
	display: -webkit-flex; 	// NEW - Chrome
	display: flex; 			// NEW, Spec - Opera 12.1, Firefox 20+
}

// Only necessary if we need a preferred size on a given child within a flexbox
// Values: numbers and widths

@mixin flexelement($flexwidth,$flexnum) {
	-webkit-box-flex: $flexwidth $flexnum;
	-moz-box-flex: $flexwidth $flexnum;
	-webkit-flex: $flexwidth $flexnum;
	-ms-flex: $flexwidth $flexnum;
	flex: $flexwidth $flexnum;
	// Must specify a fallback width
	width: $flexwidth;
}

// Ordering allows children to be placed above/below each other
// Values: numbers only

@mixin flexorder($order) {
	-webkit-box-ordinal-group: $order;
	-moz-box-ordinal-group: $order;
	-ms-flex-order: $order;
	-webkit-order: $order;
	order: $order;
}

// Flexbox direction determines how the children are laid out
// Values: row (default), row-reverse, column, column-reverse

@mixin flexdir($dir) {
	-webkit-flex-direction: $dir;
	-moz-flex-direction: $dir;
	-ms-flex-direction: $dir;
	flex-direction: $dir;
}

// Flexbox wrapping ensures the flexbox parent can become multiline
// Values: nowrap (default), wrap, wrap-reverse

@mixin flexwrap($wrap) {
	-webkit-flex-wrap: $wrap;
	-moz-flex-wrap: $wrap;
	-ms-flex-wrap: $wrap;
	flex-wrap: $wrap;
}

// Flexbox alignment on the main axis (flex-direction determines the main axis)
// Values: start, end, center, justify, distribute

@mixin flexpack($pack) {
	-webkit-flex-pack: $pack;
	-moz-flex-pack: $pack;
	-ms-flex-pack: $pack;
	flex-pack: $pack;
}

// Flexbox alignment on the cross axis (the opposite of the main axis)
// Values: start, end, center, justify, distribute

@mixin flexalign($align) {
	-webkit-flex-align: $align;
	-moz-flex-align: $align;
	-ms-flex-align: $align;
	flex-align: $align;
}


// ==|== S:02 Flexbox ==============================================


.flexy {
	@include flexbox;
	width: 100%;
}

.main-content {
	@include flexorder(2);
	padding: 0 40px;
}

.side-nav {
	@include flexorder(1);
}

.right-nav {
	@include flexorder(3);
}

// Centering 
.centering {
	@include flexbox;
	@include flexpack(center);
	@include flexalign(center);
	width: 100%;
	height: 250px;
	background: #eee;
}

.centering div {
	padding: 0 20px;
}


// ==|== S:03 Responsive flexbox styles ============================


// Desktop

@include media(desktop) {
	
}

// iPad

@include media(ipad) {

	.main-content {
		@include flexorder(1);
		// Sets a specific width
		@include flexelement(500px,1);
		padding: 0;
	}

	.side-nav,
	.right-nav {
	// Sets a specific width
		@include flexelement(150px,1);
		padding: 0 20px;
	}

	.side-nav {
		@include flexorder(2);
	}

	.right-nav {
		@include flexorder(3);
	}

}

// Tablet (funnels down to phone)

@include media(tablet) {

	.flexy {
	// Forces children to stack
		@include flexwrap(wrap);
	}

	.main-content {
		@include flexorder(1);
		padding: 0;
	}

	.side-nav {
		@include flexorder(2);
	}

	.right-nav {
		@include flexorder(3);
	}

}

// Phone Landscape

@include media(phone-landscape) {
	
}

// Phone Portrait

@include media(phone-portrait) {
	
}